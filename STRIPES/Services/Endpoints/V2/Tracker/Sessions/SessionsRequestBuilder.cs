// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using STRIPES.Services.Endpoints.Models;
using STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace STRIPES.Services.Endpoints.V2.Tracker.Sessions
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\tracker\sessions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SessionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the STRIPES.Services.Endpoints.v2.tracker.sessions.item collection</summary>
        /// <param name="position">Session Id</param>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder"/></returns>
        public global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the STRIPES.Services.Endpoints.v2.tracker.sessions.item collection</summary>
        /// <param name="position">Session Id</param>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("%2Did", position);
                return new global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SessionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/tracker/sessions{?arrivalId*,callsign*,connectionType*,departureId*,from*,page*,perPage*,to*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SessionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/tracker/sessions{?arrivalId*,callsign*,connectionType*,departureId*,from*,page*,perPage*,to*,userId*}", rawUrl)
        {
        }
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.PaginatedSessionDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::STRIPES.Services.Endpoints.Models.SwaggerResponsesDto">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::STRIPES.Services.Endpoints.Models.PaginatedSessionDto?> GetAsync(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder.SessionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::STRIPES.Services.Endpoints.Models.PaginatedSessionDto> GetAsync(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder.SessionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::STRIPES.Services.Endpoints.Models.SwaggerResponsesDto.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::STRIPES.Services.Endpoints.Models.PaginatedSessionDto>(requestInfo, global::STRIPES.Services.Endpoints.Models.PaginatedSessionDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder.SessionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder.SessionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        #pragma warning disable CS1591
        public partial class SessionsRequestBuilderGetQueryParameters 
        #pragma warning restore CS1591
        {
            /// <summary>Arrival airport Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("arrivalId")]
            public string? ArrivalId { get; set; }
#nullable restore
#else
            [QueryParameter("arrivalId")]
            public string ArrivalId { get; set; }
#endif
            /// <summary>The callsign that was used to connect</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("callsign")]
            public string? Callsign { get; set; }
#nullable restore
#else
            [QueryParameter("callsign")]
            public string Callsign { get; set; }
#endif
            /// <summary>The type of connection of the session</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("connectionType")]
            public string? ConnectionType { get; set; }
#nullable restore
#else
            [QueryParameter("connectionType")]
            public string ConnectionType { get; set; }
#endif
            /// <summary>Departure airport Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("departureId")]
            public string? DepartureId { get; set; }
#nullable restore
#else
            [QueryParameter("departureId")]
            public string DepartureId { get; set; }
#endif
            /// <summary>Date from which to calculate the maximum</summary>
            [QueryParameter("from")]
            public DateTimeOffset? From { get; set; }
            /// <summary>The number of the page</summary>
            [QueryParameter("page")]
            public double? Page { get; set; }
            /// <summary>The number of elements per page</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("perPage")]
            public string? PerPage { get; set; }
#nullable restore
#else
            [QueryParameter("perPage")]
            public string PerPage { get; set; }
#endif
            /// <summary>Date until which to calculate the maximum</summary>
            [QueryParameter("to")]
            public DateTimeOffset? To { get; set; }
            /// <summary>The user whom the sessions</summary>
            [QueryParameter("userId")]
            public double? UserId { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SessionsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::STRIPES.Services.Endpoints.V2.Tracker.Sessions.SessionsRequestBuilder.SessionsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
