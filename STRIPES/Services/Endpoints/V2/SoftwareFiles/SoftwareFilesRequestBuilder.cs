// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using STRIPES.Services.Endpoints.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace STRIPES.Services.Endpoints.V2.SoftwareFiles
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\softwareFiles
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SoftwareFilesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SoftwareFilesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/softwareFiles?fsdName={fsdName}&operatingSystem={operatingSystem}&type={type}&version={version}&versionSuffix={versionSuffix}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SoftwareFilesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/softwareFiles?fsdName={fsdName}&operatingSystem={operatingSystem}&type={type}&version={version}&versionSuffix={versionSuffix}", rawUrl)
        {
        }
        /// <returns>A List&lt;global::STRIPES.Services.Endpoints.Models.SoftwareFileDto&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::STRIPES.Services.Endpoints.Models.SwaggerResponsesDto">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::STRIPES.Services.Endpoints.Models.SoftwareFileDto>?> GetAsync(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder.SoftwareFilesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::STRIPES.Services.Endpoints.Models.SoftwareFileDto>> GetAsync(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder.SoftwareFilesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::STRIPES.Services.Endpoints.Models.SwaggerResponsesDto.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::STRIPES.Services.Endpoints.Models.SoftwareFileDto>(requestInfo, global::STRIPES.Services.Endpoints.Models.SoftwareFileDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder.SoftwareFilesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder.SoftwareFilesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        #pragma warning disable CS1591
        public partial class SoftwareFilesRequestBuilderGetQueryParameters 
        #pragma warning restore CS1591
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fsdName")]
            public string? FsdName { get; set; }
#nullable restore
#else
            [QueryParameter("fsdName")]
            public string FsdName { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("operatingSystem")]
            public string? OperatingSystem { get; set; }
#nullable restore
#else
            [QueryParameter("operatingSystem")]
            public string OperatingSystem { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("version")]
            public string? Version { get; set; }
#nullable restore
#else
            [QueryParameter("version")]
            public string Version { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("versionSuffix")]
            public string? VersionSuffix { get; set; }
#nullable restore
#else
            [QueryParameter("versionSuffix")]
            public string VersionSuffix { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SoftwareFilesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::STRIPES.Services.Endpoints.V2.SoftwareFiles.SoftwareFilesRequestBuilder.SoftwareFilesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
