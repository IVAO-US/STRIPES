// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace STRIPES.Services.Endpoints.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PilotTrackDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The altitude property</summary>
        public double? Altitude { get; set; }
        /// <summary>The altitudeDifference property</summary>
        public double? AltitudeDifference { get; set; }
        /// <summary>The arrivalDistance property</summary>
        public double? ArrivalDistance { get; set; }
        /// <summary>The bank property</summary>
        public double? Bank { get; set; }
        /// <summary>The departureDistance property</summary>
        public double? DepartureDistance { get; set; }
        /// <summary>The groundSpeed property</summary>
        public double? GroundSpeed { get; set; }
        /// <summary>The heading property</summary>
        public double? Heading { get; set; }
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The onGround property</summary>
        public bool? OnGround { get; set; }
        /// <summary>The pitch property</summary>
        public double? Pitch { get; set; }
        /// <summary>The sandbagging property</summary>
        public bool? Sandbagging { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The time property</summary>
        public double? Time { get; set; }
        /// <summary>The timestamp property</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The transponder property</summary>
        public double? Transponder { get; set; }
        /// <summary>The transponderMode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransponderMode { get; set; }
#nullable restore
#else
        public string TransponderMode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.Models.PilotTrackDto"/> and sets the default values.
        /// </summary>
        public PilotTrackDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.PilotTrackDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::STRIPES.Services.Endpoints.Models.PilotTrackDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::STRIPES.Services.Endpoints.Models.PilotTrackDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altitude", n => { Altitude = n.GetDoubleValue(); } },
                { "altitudeDifference", n => { AltitudeDifference = n.GetDoubleValue(); } },
                { "arrivalDistance", n => { ArrivalDistance = n.GetDoubleValue(); } },
                { "bank", n => { Bank = n.GetDoubleValue(); } },
                { "departureDistance", n => { DepartureDistance = n.GetDoubleValue(); } },
                { "groundSpeed", n => { GroundSpeed = n.GetDoubleValue(); } },
                { "heading", n => { Heading = n.GetDoubleValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "onGround", n => { OnGround = n.GetBoolValue(); } },
                { "pitch", n => { Pitch = n.GetDoubleValue(); } },
                { "sandbagging", n => { Sandbagging = n.GetBoolValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "time", n => { Time = n.GetDoubleValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "transponder", n => { Transponder = n.GetDoubleValue(); } },
                { "transponderMode", n => { TransponderMode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("altitude", Altitude);
            writer.WriteDoubleValue("altitudeDifference", AltitudeDifference);
            writer.WriteDoubleValue("arrivalDistance", ArrivalDistance);
            writer.WriteDoubleValue("bank", Bank);
            writer.WriteDoubleValue("departureDistance", DepartureDistance);
            writer.WriteDoubleValue("groundSpeed", GroundSpeed);
            writer.WriteDoubleValue("heading", Heading);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteBoolValue("onGround", OnGround);
            writer.WriteDoubleValue("pitch", Pitch);
            writer.WriteBoolValue("sandbagging", Sandbagging);
            writer.WriteStringValue("state", State);
            writer.WriteDoubleValue("time", Time);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteDoubleValue("transponder", Transponder);
            writer.WriteStringValue("transponderMode", TransponderMode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
