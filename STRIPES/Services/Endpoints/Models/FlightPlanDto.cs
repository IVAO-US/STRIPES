// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace STRIPES.Services.Endpoints.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FlightPlanDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Time in seconds</summary>
        public double? ActualDepartureTime { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aircraft property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::STRIPES.Services.Endpoints.Models.AircraftSummaryDto? Aircraft { get; set; }
#nullable restore
#else
        public global::STRIPES.Services.Endpoints.Models.AircraftSummaryDto Aircraft { get; set; }
#endif
        /// <summary>The aircraftEquipments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AircraftEquipments { get; set; }
#nullable restore
#else
        public List<string> AircraftEquipments { get; set; }
#endif
        /// <summary>The aircraftId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AircraftId { get; set; }
#nullable restore
#else
        public string AircraftId { get; set; }
#endif
        /// <summary>The aircraftNumber property</summary>
        public double? AircraftNumber { get; set; }
        /// <summary>The aircraftTransponderTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AircraftTransponderTypes { get; set; }
#nullable restore
#else
        public List<string> AircraftTransponderTypes { get; set; }
#endif
        /// <summary>The alternative property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto? Alternative { get; set; }
#nullable restore
#else
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto Alternative { get; set; }
#endif
        /// <summary>The alternative2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto? Alternative2 { get; set; }
#nullable restore
#else
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto Alternative2 { get; set; }
#endif
        /// <summary>The alternative2Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Alternative2Id { get; set; }
#nullable restore
#else
        public string Alternative2Id { get; set; }
#endif
        /// <summary>The alternativeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternativeId { get; set; }
#nullable restore
#else
        public string AlternativeId { get; set; }
#endif
        /// <summary>The arrival property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto? Arrival { get; set; }
#nullable restore
#else
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto Arrival { get; set; }
#endif
        /// <summary>The arrivalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArrivalId { get; set; }
#nullable restore
#else
        public string ArrivalId { get; set; }
#endif
        /// <summary>The departure property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto? Departure { get; set; }
#nullable restore
#else
        public global::STRIPES.Services.Endpoints.Models.BaseAirportDto Departure { get; set; }
#endif
        /// <summary>The departureId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DepartureId { get; set; }
#nullable restore
#else
        public string DepartureId { get; set; }
#endif
        /// <summary>Time in seconds</summary>
        public double? DepartureTime { get; set; }
        /// <summary>Time in seconds</summary>
        public double? Eet { get; set; }
        /// <summary>Time in seconds</summary>
        public double? Endurance { get; set; }
        /// <summary>The flightRules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FlightRules { get; set; }
#nullable restore
#else
        public string FlightRules { get; set; }
#endif
        /// <summary>The flightType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FlightType { get; set; }
#nullable restore
#else
        public string FlightType { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Level { get; set; }
#nullable restore
#else
        public string Level { get; set; }
#endif
        /// <summary>The peopleOnBoard property</summary>
        public double? PeopleOnBoard { get; set; }
        /// <summary>The remarks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Remarks { get; set; }
#nullable restore
#else
        public string Remarks { get; set; }
#endif
        /// <summary>The revision property</summary>
        public double? Revision { get; set; }
        /// <summary>The route property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Route { get; set; }
#nullable restore
#else
        public string Route { get; set; }
#endif
        /// <summary>The sessionId property</summary>
        public double? SessionId { get; set; }
        /// <summary>The speed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Speed { get; set; }
#nullable restore
#else
        public string Speed { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.Models.FlightPlanDto"/> and sets the default values.
        /// </summary>
        public FlightPlanDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.FlightPlanDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::STRIPES.Services.Endpoints.Models.FlightPlanDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::STRIPES.Services.Endpoints.Models.FlightPlanDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actualDepartureTime", n => { ActualDepartureTime = n.GetDoubleValue(); } },
                { "aircraft", n => { Aircraft = n.GetObjectValue<global::STRIPES.Services.Endpoints.Models.AircraftSummaryDto>(global::STRIPES.Services.Endpoints.Models.AircraftSummaryDto.CreateFromDiscriminatorValue); } },
                { "aircraftEquipments", n => { AircraftEquipments = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "aircraftId", n => { AircraftId = n.GetStringValue(); } },
                { "aircraftNumber", n => { AircraftNumber = n.GetDoubleValue(); } },
                { "aircraftTransponderTypes", n => { AircraftTransponderTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "alternative", n => { Alternative = n.GetObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>(global::STRIPES.Services.Endpoints.Models.BaseAirportDto.CreateFromDiscriminatorValue); } },
                { "alternative2", n => { Alternative2 = n.GetObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>(global::STRIPES.Services.Endpoints.Models.BaseAirportDto.CreateFromDiscriminatorValue); } },
                { "alternative2Id", n => { Alternative2Id = n.GetStringValue(); } },
                { "alternativeId", n => { AlternativeId = n.GetStringValue(); } },
                { "arrival", n => { Arrival = n.GetObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>(global::STRIPES.Services.Endpoints.Models.BaseAirportDto.CreateFromDiscriminatorValue); } },
                { "arrivalId", n => { ArrivalId = n.GetStringValue(); } },
                { "departure", n => { Departure = n.GetObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>(global::STRIPES.Services.Endpoints.Models.BaseAirportDto.CreateFromDiscriminatorValue); } },
                { "departureId", n => { DepartureId = n.GetStringValue(); } },
                { "departureTime", n => { DepartureTime = n.GetDoubleValue(); } },
                { "eet", n => { Eet = n.GetDoubleValue(); } },
                { "endurance", n => { Endurance = n.GetDoubleValue(); } },
                { "flightRules", n => { FlightRules = n.GetStringValue(); } },
                { "flightType", n => { FlightType = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "level", n => { Level = n.GetStringValue(); } },
                { "peopleOnBoard", n => { PeopleOnBoard = n.GetDoubleValue(); } },
                { "remarks", n => { Remarks = n.GetStringValue(); } },
                { "revision", n => { Revision = n.GetDoubleValue(); } },
                { "route", n => { Route = n.GetStringValue(); } },
                { "sessionId", n => { SessionId = n.GetDoubleValue(); } },
                { "speed", n => { Speed = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("actualDepartureTime", ActualDepartureTime);
            writer.WriteObjectValue<global::STRIPES.Services.Endpoints.Models.AircraftSummaryDto>("aircraft", Aircraft);
            writer.WriteCollectionOfPrimitiveValues<string>("aircraftEquipments", AircraftEquipments);
            writer.WriteStringValue("aircraftId", AircraftId);
            writer.WriteDoubleValue("aircraftNumber", AircraftNumber);
            writer.WriteCollectionOfPrimitiveValues<string>("aircraftTransponderTypes", AircraftTransponderTypes);
            writer.WriteObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>("alternative", Alternative);
            writer.WriteObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>("alternative2", Alternative2);
            writer.WriteStringValue("alternative2Id", Alternative2Id);
            writer.WriteStringValue("alternativeId", AlternativeId);
            writer.WriteObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>("arrival", Arrival);
            writer.WriteStringValue("arrivalId", ArrivalId);
            writer.WriteObjectValue<global::STRIPES.Services.Endpoints.Models.BaseAirportDto>("departure", Departure);
            writer.WriteStringValue("departureId", DepartureId);
            writer.WriteDoubleValue("departureTime", DepartureTime);
            writer.WriteDoubleValue("eet", Eet);
            writer.WriteDoubleValue("endurance", Endurance);
            writer.WriteStringValue("flightRules", FlightRules);
            writer.WriteStringValue("flightType", FlightType);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("level", Level);
            writer.WriteDoubleValue("peopleOnBoard", PeopleOnBoard);
            writer.WriteStringValue("remarks", Remarks);
            writer.WriteDoubleValue("revision", Revision);
            writer.WriteStringValue("route", Route);
            writer.WriteDoubleValue("sessionId", SessionId);
            writer.WriteStringValue("speed", Speed);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
