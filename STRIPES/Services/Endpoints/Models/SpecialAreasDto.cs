// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace STRIPES.Services.Endpoints.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SpecialAreasDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activationDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActivationDetails { get; set; }
#nullable restore
#else
        public string ActivationDetails { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The centers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Centers { get; set; }
#nullable restore
#else
        public List<string> Centers { get; set; }
#endif
        /// <summary>The createdAt property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The dayFri property</summary>
        public bool? DayFri { get; set; }
        /// <summary>The dayMon property</summary>
        public bool? DayMon { get; set; }
        /// <summary>The daySat property</summary>
        public bool? DaySat { get; set; }
        /// <summary>The daySun property</summary>
        public bool? DaySun { get; set; }
        /// <summary>The dayThu property</summary>
        public bool? DayThu { get; set; }
        /// <summary>The dayTue property</summary>
        public bool? DayTue { get; set; }
        /// <summary>The dayWed property</summary>
        public bool? DayWed { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The endTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndTime { get; set; }
#nullable restore
#else
        public string EndTime { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The maximumAlt property</summary>
        public double? MaximumAlt { get; set; }
        /// <summary>The minimumAlt property</summary>
        public double? MinimumAlt { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The range property</summary>
        public bool? Range { get; set; }
        /// <summary>The regionMap property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>? RegionMap { get; set; }
#nullable restore
#else
        public List<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto> RegionMap { get; set; }
#endif
        /// <summary>The regionMapPolygon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<UntypedNode>? RegionMapPolygon { get; set; }
#nullable restore
#else
        public List<UntypedNode> RegionMapPolygon { get; set; }
#endif
        /// <summary>The startTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartTime { get; set; }
#nullable restore
#else
        public string StartTime { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The updatedAt property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.Models.SpecialAreasDto"/> and sets the default values.
        /// </summary>
        public SpecialAreasDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.SpecialAreasDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::STRIPES.Services.Endpoints.Models.SpecialAreasDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::STRIPES.Services.Endpoints.Models.SpecialAreasDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activationDetails", n => { ActivationDetails = n.GetStringValue(); } },
                { "centers", n => { Centers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "dayFri", n => { DayFri = n.GetBoolValue(); } },
                { "dayMon", n => { DayMon = n.GetBoolValue(); } },
                { "daySat", n => { DaySat = n.GetBoolValue(); } },
                { "daySun", n => { DaySun = n.GetBoolValue(); } },
                { "dayThu", n => { DayThu = n.GetBoolValue(); } },
                { "dayTue", n => { DayTue = n.GetBoolValue(); } },
                { "dayWed", n => { DayWed = n.GetBoolValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "endTime", n => { EndTime = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "maximumAlt", n => { MaximumAlt = n.GetDoubleValue(); } },
                { "minimumAlt", n => { MinimumAlt = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "range", n => { Range = n.GetBoolValue(); } },
                { "regionMap", n => { RegionMap = n.GetCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>(global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "regionMapPolygon", n => { RegionMapPolygon = n.GetCollectionOfPrimitiveValues<UntypedNode>()?.AsList(); } },
                { "startTime", n => { StartTime = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activationDetails", ActivationDetails);
            writer.WriteCollectionOfPrimitiveValues<string>("centers", Centers);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteBoolValue("dayFri", DayFri);
            writer.WriteBoolValue("dayMon", DayMon);
            writer.WriteBoolValue("daySat", DaySat);
            writer.WriteBoolValue("daySun", DaySun);
            writer.WriteBoolValue("dayThu", DayThu);
            writer.WriteBoolValue("dayTue", DayTue);
            writer.WriteBoolValue("dayWed", DayWed);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("endTime", EndTime);
            writer.WriteDoubleValue("id", Id);
            writer.WriteDoubleValue("maximumAlt", MaximumAlt);
            writer.WriteDoubleValue("minimumAlt", MinimumAlt);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("range", Range);
            writer.WriteCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>("regionMap", RegionMap);
            writer.WriteCollectionOfPrimitiveValues<UntypedNode>("regionMapPolygon", RegionMapPolygon);
            writer.WriteStringValue("startTime", StartTime);
            writer.WriteStringValue("type", Type);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
