// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace STRIPES.Services.Endpoints.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NowSubConnectionStatsDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The atc property</summary>
        public double? Atc { get; set; }
        /// <summary>The followMes property</summary>
        public double? FollowMes { get; set; }
        /// <summary>The observers property</summary>
        public double? Observers { get; set; }
        /// <summary>The pilots property</summary>
        public double? Pilots { get; set; }
        /// <summary>The supervisors property</summary>
        public double? Supervisors { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>The uniqueUsers24h property</summary>
        public double? UniqueUsers24h { get; set; }
        /// <summary>The worldTours property</summary>
        public double? WorldTours { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.Models.NowSubConnectionStatsDto"/> and sets the default values.
        /// </summary>
        public NowSubConnectionStatsDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.NowSubConnectionStatsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::STRIPES.Services.Endpoints.Models.NowSubConnectionStatsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::STRIPES.Services.Endpoints.Models.NowSubConnectionStatsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "atc", n => { Atc = n.GetDoubleValue(); } },
                { "followMes", n => { FollowMes = n.GetDoubleValue(); } },
                { "observers", n => { Observers = n.GetDoubleValue(); } },
                { "pilots", n => { Pilots = n.GetDoubleValue(); } },
                { "supervisors", n => { Supervisors = n.GetDoubleValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
                { "uniqueUsers24h", n => { UniqueUsers24h = n.GetDoubleValue(); } },
                { "worldTours", n => { WorldTours = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("atc", Atc);
            writer.WriteDoubleValue("followMes", FollowMes);
            writer.WriteDoubleValue("observers", Observers);
            writer.WriteDoubleValue("pilots", Pilots);
            writer.WriteDoubleValue("supervisors", Supervisors);
            writer.WriteDoubleValue("total", Total);
            writer.WriteDoubleValue("uniqueUsers24h", UniqueUsers24h);
            writer.WriteDoubleValue("worldTours", WorldTours);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
