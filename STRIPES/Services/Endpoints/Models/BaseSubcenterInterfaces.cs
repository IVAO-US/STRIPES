// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace STRIPES.Services.Endpoints.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BaseSubcenterInterfaces : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The atcCallsign property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AtcCallsign { get; set; }
#nullable restore
#else
        public string AtcCallsign { get; set; }
#endif
        /// <summary>The center property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::STRIPES.Services.Endpoints.Models.BaseCenterDto>? Center { get; set; }
#nullable restore
#else
        public List<global::STRIPES.Services.Endpoints.Models.BaseCenterDto> Center { get; set; }
#endif
        /// <summary>The centerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CenterId { get; set; }
#nullable restore
#else
        public string CenterId { get; set; }
#endif
        /// <summary>The composePosition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ComposePosition { get; set; }
#nullable restore
#else
        public string ComposePosition { get; set; }
#endif
        /// <summary>The frequency property</summary>
        public double? Frequency { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The middleIdentifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MiddleIdentifier { get; set; }
#nullable restore
#else
        public string MiddleIdentifier { get; set; }
#endif
        /// <summary>The military property</summary>
        public bool? Military { get; set; }
        /// <summary>The parentSubcenterId property</summary>
        public double? ParentSubcenterId { get; set; }
        /// <summary>The position property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Position { get; set; }
#nullable restore
#else
        public string Position { get; set; }
#endif
        /// <summary>The radarRange property</summary>
        public double? RadarRange { get; set; }
        /// <summary>The regionMap property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>? RegionMap { get; set; }
#nullable restore
#else
        public List<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto> RegionMap { get; set; }
#endif
        /// <summary>The regionMapPolygon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? RegionMapPolygon { get; set; }
#nullable restore
#else
        public UntypedNode RegionMapPolygon { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::STRIPES.Services.Endpoints.Models.BaseSubcenterInterfaces"/> and sets the default values.
        /// </summary>
        public BaseSubcenterInterfaces()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::STRIPES.Services.Endpoints.Models.BaseSubcenterInterfaces"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::STRIPES.Services.Endpoints.Models.BaseSubcenterInterfaces CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::STRIPES.Services.Endpoints.Models.BaseSubcenterInterfaces();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "atcCallsign", n => { AtcCallsign = n.GetStringValue(); } },
                { "center", n => { Center = n.GetCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseCenterDto>(global::STRIPES.Services.Endpoints.Models.BaseCenterDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "centerId", n => { CenterId = n.GetStringValue(); } },
                { "composePosition", n => { ComposePosition = n.GetStringValue(); } },
                { "frequency", n => { Frequency = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "middleIdentifier", n => { MiddleIdentifier = n.GetStringValue(); } },
                { "military", n => { Military = n.GetBoolValue(); } },
                { "parentSubcenterId", n => { ParentSubcenterId = n.GetDoubleValue(); } },
                { "position", n => { Position = n.GetStringValue(); } },
                { "radarRange", n => { RadarRange = n.GetDoubleValue(); } },
                { "regionMap", n => { RegionMap = n.GetCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>(global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "regionMapPolygon", n => { RegionMapPolygon = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("atcCallsign", AtcCallsign);
            writer.WriteCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseCenterDto>("center", Center);
            writer.WriteStringValue("centerId", CenterId);
            writer.WriteStringValue("composePosition", ComposePosition);
            writer.WriteDoubleValue("frequency", Frequency);
            writer.WriteDoubleValue("id", Id);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteStringValue("middleIdentifier", MiddleIdentifier);
            writer.WriteBoolValue("military", Military);
            writer.WriteDoubleValue("parentSubcenterId", ParentSubcenterId);
            writer.WriteStringValue("position", Position);
            writer.WriteDoubleValue("radarRange", RadarRange);
            writer.WriteCollectionOfObjectValues<global::STRIPES.Services.Endpoints.Models.BaseRegionMapDto>("regionMap", RegionMap);
            writer.WriteObjectValue<UntypedNode>("regionMapPolygon", RegionMapPolygon);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
